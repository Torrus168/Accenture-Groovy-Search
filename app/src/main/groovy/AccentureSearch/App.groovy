/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package AccentureSearch

import groovy.io.FileType
import java.nio.file.Files
import java.nio.file.Paths

class App {
    static void main(String... args) {
        if (!validate(args)) {
            System.exit(1)
        }

        App app = new App()
        app.search()
    }



    protected search(String... args) {
        // Takes path as an argument and initializes work directory & backup directory
        def directory = args[0]
        def backupDir = directory.replaceFirst('[^/]*$' , '.backup')

        // Initializes search phrase/pattern
        def searchedString = args[1]

        // Initializes replacement
        def newString = args[2]
        System.out.println newString

        //Handles deletion of old backup folder
        if (Files.exists(Paths.get(backupDir))) {
            def file = new File(backupDir)
            file.deleteDir()
            file.mkdir()
            println "Backup replaced"
        } else {
            def backupDirNew = new File(backupDir)
            backupDirNew.mkdir()
            println "backup created"
        }

        //Backup handling
        try {
            new AntBuilder().copy( todir:backupDir ) {
                fileset( dir:directory)
            }
            //FileUtils.copyDirectory(source, backup);
        } catch (IOException e) {
            e.printStackTrace();
        }

        //Initialization of new string with listed checked items
        def checkedString = new String()

        //Handling of recursive file search and check for content
        new File(directory).eachFileRecurse(FileType.FILES) { file ->
            if(file.text.contains(searchedString)) {
                file.text = file.text.replaceAll(searchedString, newString)
                checkedString += "\n $file.parent $file.name"
            }
        }

        //Creating checked_files.txt with changed file names
        def checkedFiles = new File(directory + '/checked_files.txt')
        checkedFiles.append(checkedString)

    }

    //Input validation
    static boolean validate(String... args) {
        return args.length == 3 && Files.exists(Paths.get(args[0]))
    }
}
