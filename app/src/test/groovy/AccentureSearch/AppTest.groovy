/*
 * This Spock specification was generated by the Gradle "init" task.
 */
package AccentureSearch

import spock.lang.Specification
import java.nio.file.Files
import java.nio.file.Paths


class AppTest extends Specification {
    def "validation test 1"() {
        when:
        def result = App.validate("oneArg")

        then:
        !result
    }
    def "validation test 2"() {
        when:
        def result = App.validate("/howef/wrgPath", "oneArg", "secondArg")

        then:
        !result
    }
    def "validation test 3"() {
        when:
        def result = App.validate("/howef/wrgPath", "oneArg")

        then:
        !result
    }

    def "search test"() {
        setup:

        def projectDir = System.getProperty("user.dir")
        def testDir = projectDir + "/build/testCase"
        def app = new App(testDir, "file", "OOOOOO")

        if (Files.exists(Paths.get(testDir))) {
            def file = new File(testDir)
            file.deleteDir()
        }

        new File(testDir).mkdir()
        new File(testDir + "/branch1").mkdir()
        new File(testDir + "/branch2").mkdir()

        def textTest1 = new File(testDir + "/texttest1.txt")
        textTest1.createNewFile()
        textTest1.text="text file 1"

        def textTest2 = new File(testDir + "/branch1/texttest2.txt")
        textTest2.createNewFile()
        textTest2.text="text file in first branch"

        def textTest3 = new File(testDir + "/branch2/texttest3.txt")
        textTest3.createNewFile()
        textTest3.text="text file in second branch"

        def textWrong = new File(testDir + "/branch2/wrongFile.txt")
        textWrong.createNewFile()
        textWrong.text="i do not contain a thing"

        when:

        app.search()

        then:

        textTest1.text.contains("OOOOOO") && textTest2.text.contains("OOOOOO") && textTest3.text.contains("OOOOOO")
    }
    
    def "changed files test"() {
        setup:

        def projectDir = System.getProperty("user.dir")
        def testDir = projectDir + "/build/testCase"
        def changedFilesPath = projectDir + "/build/changedFiles.txt"
        def changedFiles = new File(changedFilesPath)
        changedFiles.createNewFile()
        def app = new App(testDir, "file", "OOOOOO")
        app.logFilePath = changedFilesPath

        if (Files.exists(Paths.get(testDir))) {
            def file = new File(testDir)
            file.deleteDir()
        }

        new File(testDir).mkdir()
        new File(testDir + "/branch1").mkdir()
        new File(testDir + "/branch2").mkdir()

        def textTest1 = new File(testDir + "/texttest1.txt")
        textTest1.createNewFile()
        textTest1.text="text file 1"

        def textTest2 = new File(testDir + "/branch1/texttest2.txt")
        textTest2.createNewFile()
        textTest2.text="text file in first branch"

        def textTest3 = new File(testDir + "/branch2/texttest3.txt")
        textTest3.createNewFile()
        textTest3.text="text file in second branch"

        def textWrong = new File(testDir + "/branch2/wrongFile.txt")
        textWrong.createNewFile()
        textWrong.text="i do not contain a thing"

        when:

        app.search()

        then:

        changedFiles.text.contains("texttest1")
    }
}
