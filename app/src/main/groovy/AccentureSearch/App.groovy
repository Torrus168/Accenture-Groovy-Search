/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package AccentureSearch

import groovy.io.FileType
import java.nio.file.Files
import java.nio.file.Paths
import groovy.util.logging.Log

@Log
/**
 *
 */
class App {
    static void main(String... args) {
        log.info("Initiated")
        if (!validate(args)) {
            log.severe("Validation error")
            System.exit(1)
        }

        App app = new App()
        //backupZip(args)
        app.search(args)
        
    }



    protected search(String... args) {
        // Takes path as an argument and initializes work directory & backup directory
        def directory = args[0]

        // Initializes search phrase/pattern
        def searchedString = args[1]

        // Initializes replacement
        def newString = args[2]

        //Initialization of new string with listed checked items
        def checkedString = new String()

        //Handling of recursive file search and check for content
        new File(directory).eachFileRecurse(FileType.FILES) { file ->
            if(file.text.contains(searchedString)) {
                log.info(file.name + ' has been changed')
                file.text = file.text.replaceAll(searchedString, newString)
                checkedString += "\n $file.parent $file.name"
            }
        }

        //Creating checked_files.txt with changed file names
        if(args.length > 3) {
            def checkedFiles = new File(args[3])
            checkedFiles.append(checkedString)
        } else {
            def checkedFiles = new File(directory + '/checked_files.txt')
            checkedFiles.delete()
            checkedFiles.createNewFile()
            checkedFiles.append(checkedString)
        }

        log.info('Search has been executed')
    }

    //Input validation
    static boolean validate(String... args) {
        if(args.length > 3) {
            return Files.exists(Paths.get(args[0])) && Files.exists(Paths.get(args[3]))
        } else {
            return args.length > 2 && Files.exists(Paths.get(args[0]))
        }
    }
}
